# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import json
import os
import logging

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import aiofiles

logger = logging.getLogger(__name__)

CURRENCY = 'XTR'
VERSION = '1.1.0'
CONFIG_PATH = "config.json"

DEFAULT_CONFIG = lambda user_id: {
    "MIN_PRICE": 5000,
    "MAX_PRICE": 10000,
    "MIN_SUPPLY": 1000,
    "MAX_SUPPLY": 10000,
    "COUNT": 5,
    "TARGET_USER_ID": user_id,
    "TARGET_CHAT_ID": None,
    "BALANCE": 0,
    "BOUGHT": 0,
    "ACTIVE": False,
    "DONE": False,
    "LAST_MENU_MESSAGE_ID": None
}
CONFIG_TYPES = {
    "MIN_PRICE": (int, False),
    "MAX_PRICE": (int, False),
    "MIN_SUPPLY": (int, False),
    "MAX_SUPPLY": (int, False),
    "COUNT": (int, False),
    "TARGET_USER_ID": (int, True),
    "TARGET_CHAT_ID": (str, True),
    "BALANCE": (int, False),
    "BOUGHT": (int, False),
    "ACTIVE": (bool, False),
    "DONE": (bool, False),
    "LAST_MENU_MESSAGE_ID": (int, True)
}


def format_config_summary(config: dict, user_id: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –º–µ–Ω—é."""
    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if config.get("ACTIVE") else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    balance = config["BALANCE"]
    target_display = get_target_display(config, user_id)

    return (
        f"üö¶ <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
        f"üí∞ <b>–¶–µ–Ω–∞</b>: {config.get('MIN_PRICE'):,} ‚Äì {config.get('MAX_PRICE'):,} ‚òÖ\n"
        f"üì¶ <b>–°–∞–ø–ª–∞–π</b>: {config.get('MIN_SUPPLY'):,} ‚Äì {config.get('MAX_SUPPLY'):,}\n"
        f"üéÅ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>: {config.get('BOUGHT'):,} / {config.get('COUNT'):,}\n"
        f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å</b>: {target_display}\n\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>: {balance:,} ‚òÖ\n"
    )


def get_target_display(config: dict, user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ user_id."""
    target_chat_id = config.get("TARGET_CHAT_ID")
    target_user_id = config.get("TARGET_USER_ID")
    if target_chat_id:
        return f"{target_chat_id} (–ö–∞–Ω–∞–ª)"
    elif str(target_user_id) == str(user_id):
        return f"<code>{target_user_id}</code> (–í—ã)"
    else:
        return f"<code>{target_user_id}</code>"
    
    
def is_valid_type(value, expected_type, allow_none=False):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ç–∏–ø—É (–∏–ª–∏ None, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)."""
    if value is None:
        return allow_none
    return isinstance(value, expected_type)
    

async def get_valid_config(user_id: int) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    raw = await load_config()
    default_config = DEFAULT_CONFIG(user_id)
    return await validate_config(raw, default_config=default_config)


async def ensure_config(path=CONFIG_PATH, default_config=None):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
    if not os.path.exists(path):
        async with aiofiles.open(path, mode="w", encoding="utf-8") as f:
            await f.write(json.dumps(default_config, indent=2))
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {path}")


async def load_config(path=CONFIG_PATH):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π."""
    await ensure_config(path)
    async with aiofiles.open(path, mode="r", encoding="utf-8") as f:
        data = await f.read()
        return json.loads(data)


async def save_config(new_data: dict, path=CONFIG_PATH):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª, –æ–±–Ω–æ–≤–ª—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é."""
    try:
        current_data = {}
        if os.path.exists(path):
            async with aiofiles.open(path, mode="r", encoding="utf-8") as f:
                current_raw = await f.read()
                if current_raw.strip():
                    current_data = json.loads(current_raw)

        current_data.update(new_data)

        async with aiofiles.open(path, mode="w", encoding="utf-8") as f:
            await f.write(json.dumps(current_data, indent=2))

        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å config: {e}")

async def validate_config(config: dict, default_config: dict) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    updated = False
    validated = {}

    for key, default_value in default_config.items():
        expected_type, allow_none = CONFIG_TYPES.get(key, (type(default_value), False))
        if key not in config or not is_valid_type(config[key], expected_type, allow_none):
            logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ '{key}', –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_value}")
            validated[key] = default_value
            updated = True
        else:
            validated[key] = config[key]

    if updated:
        await save_config(validated)
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏.")

    return validated

