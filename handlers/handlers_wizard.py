# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ---
from services.config import save_config, get_valid_config
from services.menu import update_menu, payment_keyboard
from services.balance import refresh_balance, refund_all_star_payments
from services.config import CURRENCY

wizard_router = Router()

class ConfigWizard(StatesGroup):
    """
    –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM wizard (–ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏).
    –ö–∞–∂–¥—ã–π state ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞.
    """
    min_price = State()
    max_price = State()
    min_supply = State()
    max_supply = State()
    count = State()
    user_id = State()
    deposit_amount = State()
    refund_id = State()


@wizard_router.callback_query(F.data == "edit_config")
async def edit_config_handler(call: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    await call.message.answer("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>5000</code>\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
    await state.set_state(ConfigWizard.min_price)
    await call.answer()


@wizard_router.message(ConfigWizard.min_price)
async def step_min_price(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–∞.
    """
    if await try_cancel(message, state):
        return
    
    try:
        value = int(message.text)
        if value <= 0:
            raise ValueError
        await state.update_data(MIN_PRICE=value)
        await message.answer("üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>10000</code>\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
        await state.set_state(ConfigWizard.max_price)
    except ValueError:
        await message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@wizard_router.message(ConfigWizard.max_price)
async def step_max_price(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –ø–æ–¥–∞—Ä–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
    """
    if await try_cancel(message, state):
        return
    
    try:
        value = int(message.text)
        if value <= 0:
            raise ValueError

        data = await state.get_data()
        min_price = data.get("MIN_PRICE")
        if min_price and value < min_price:
            await message.answer("üö´ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.")
            return

        await state.update_data(MAX_PRICE=value)
        await message.answer("üì¶ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∞–ø–ª–∞–π –ø–æ–¥–∞—Ä–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1000</code>\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
        await state.set_state(ConfigWizard.min_supply)
    except ValueError:
        await message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@wizard_router.message(ConfigWizard.min_supply)
async def step_min_supply(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–∞–ø–ª–∞—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞.
    """
    if await try_cancel(message, state):
        return
    
    try:
        value = int(message.text)
        if value <= 0:
            raise ValueError
        await state.update_data(MIN_SUPPLY=value)
        await message.answer("üì¶ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–∞–ø–ª–∞–π –ø–æ–¥–∞—Ä–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>10000</code>\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
        await state.set_state(ConfigWizard.max_supply)
    except ValueError:
        await message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@wizard_router.message(ConfigWizard.max_supply)
async def step_max_supply(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–∞–ø–ª–∞—è –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
    """
    if await try_cancel(message, state):
        return
    
    try:
        value = int(message.text)
        if value <= 0:
            raise ValueError

        data = await state.get_data()
        min_supply = data.get("MIN_SUPPLY")
        if min_supply and value < min_supply:
            await message.answer("üö´ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–∞–ø–ª–∞–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        await state.update_data(MAX_SUPPLY=value)
        await message.answer("üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>5</code>\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
        await state.set_state(ConfigWizard.count)
    except ValueError:
        await message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@wizard_router.message(ConfigWizard.count)
async def step_count(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∞—Ä–∫–æ–≤.
    """
    if await try_cancel(message, state):
        return
    
    try:
        value = int(message.text)
        if value <= 0:
            raise ValueError
        await state.update_data(COUNT=value)
        await message.answer(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n\n"
            f"‚Ä¢ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä –≤–∞—à: <code>{message.from_user.id}</code>)\n"
            "‚Ä¢ –ò–ª–∏ <b>username –∫–∞–Ω–∞–ª–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>@channel</code>)\n\n"
            "‚ùóÔ∏è –£–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—É—Ç @userinfobot\n\n"
            "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å"
        )
        await state.set_state(ConfigWizard.user_id)
    except ValueError:
        await message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@wizard_router.message(ConfigWizard.user_id)
async def step_user_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞).
    –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    if await try_cancel(message, state):
        return
    
    user_input = message.text.strip()
    if user_input.startswith("@"):
        target_chat = user_input
        target_user = None
    elif user_input.isdigit():
        target_chat = None
        target_user = int(user_input)
    else:
        await message.answer(
            "üö´ –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∞–∫–∫–∞—É–Ω—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞. "
            "–ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–æ–ª—å –∫–∞–Ω–∞–ª, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ username –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return

    await state.update_data(
        TARGET_USER_ID=target_user,
        TARGET_CHAT_ID=target_chat
    )

    data = await state.get_data()
    config = await get_valid_config(message.from_user.id)

    config.update({
        "MIN_PRICE": data["MIN_PRICE"],
        "MAX_PRICE": data["MAX_PRICE"],
        "MIN_SUPPLY": data["MIN_SUPPLY"],
        "MAX_SUPPLY": data["MAX_SUPPLY"],
        "COUNT": data["COUNT"],
        "TARGET_USER_ID": target_user,
        "TARGET_CHAT_ID": target_chat,
        "BOUGHT": 0,
        "ACTIVE": False,
        "DONE": False,
    })

    await save_config(config)
    await state.clear()
    await message.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å üü¢ —Å—Ç–∞—Ç—É—Å!")
    await update_menu(bot=message.bot, chat_id=message.chat.id, user_id=message.from_user.id, message_id=message.message_id)


@wizard_router.callback_query(F.data == "deposit_menu")
async def deposit_menu(call: CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
    """
    await call.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>5000</code>\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
    await state.set_state(ConfigWizard.deposit_amount)
    await call.answer()


@wizard_router.message(ConfigWizard.deposit_amount)
async def deposit_amount_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—á—ë—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É.
    """
    if await try_cancel(message, state):
        return

    try:
        amount = int(message.text)
        if amount < 1 or amount > 10000:
            raise ValueError
        prices = [LabeledPrice(label=CURRENCY, amount=amount)]
        await message.answer_invoice(
            title="–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤",
            description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            prices=prices,
            provider_token="",  # –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
            payload="stars_deposit",
            currency=CURRENCY,
            start_parameter="deposit",
            reply_markup=payment_keyboard(amount=amount),
        )
        await state.clear()
    except ValueError:
        await message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000.")


@wizard_router.callback_query(F.data == "refund_menu")
async def refund_menu(call: CallbackQuery, state: FSMContext):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É –∑–≤—ë–∑–¥ (–ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏).
    """
    await call.message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:\n\n/withdraw_all ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –≤–µ—Å—å –±–∞–ª–∞–Ω—Å\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
    await state.set_state(ConfigWizard.refund_id)
    await call.answer()


@wizard_router.message(ConfigWizard.refund_id)
async def refund_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ /withdraw_all.
    """
    if message.text and message.text.strip().lower() == "/withdraw_all":
        await state.clear()
        await withdraw_all_handler(message)
        return
    
    if await try_cancel(message, state):
        return

    txn_id = message.text.strip()
    try:
        await message.bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=txn_id
        )
        await message.answer("‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        balance = await refresh_balance(message.bot)
        await update_menu(bot=message.bot, chat_id=message.chat.id, user_id=message.from_user.id, message_id=message.message_id)
    except Exception as e:
        await message.answer(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ:\n<code>{e}</code>")
    await state.clear()


@wizard_router.message(Command("withdraw_all"))
async def withdraw_all_handler(message: Message):
    """
    –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–≤—ë–∑–¥ —Å –±–∞–ª–∞–Ω—Å–∞.
    """
    balance = await refresh_balance(message.bot)
    if balance == 0:
        await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
        await update_menu(bot=message.bot, chat_id=message.chat.id, user_id=message.from_user.id, message_id=message.message_id)
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="withdraw_all_confirm"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="withdraw_all_cancel"),
            ]
        ]
    )
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–≤—ë–∑–¥—ã?",
        reply_markup=keyboard,
    )


@wizard_router.callback_query(lambda c: c.data == "withdraw_all_confirm")
async def withdraw_all_confirmed(call: CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—Å–µ—Ö –∑–≤—ë–∑–¥. –í—ã–≤–æ–¥–∏—Ç –æ—Ç—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    await call.message.edit_text("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã–≤–æ–¥ –∑–≤—ë–∑–¥...")  # –º–æ–∂–Ω–æ —Ç—É—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥/–æ—Ç—á—ë—Ç

    async def send_status(msg):
        await call.message.answer(msg)

    await call.answer()

    result = await refund_all_star_payments(
        bot=call.bot,
        user_id=call.from_user.id,
        username=call.from_user.username,
        message_func=send_status,
    )
    if result["count"] > 0:
        msg = f"‚úÖ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ‚òÖ{result['refunded']}\nüîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {result['count']}"
        if result["left"] > 0:
            msg += f"\nüí∞ –û—Å—Ç–∞—Ç–æ–∫ –∑–≤—ë–∑–¥: {result['left']}"
            dep = result.get("next_deposit")
            if dep:
                need = dep['amount'] - result['left']
                msg += (
                    f"\n‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –µ—â—ë –º–∏–Ω–∏–º—É–º –Ω–∞ ‚òÖ{need} (–∏–ª–∏ —Å—É–º–º–∞—Ä–Ω–æ –¥–æ ‚òÖ{dep['amount']})."
                )
        await call.message.answer(msg)
    else:
        await call.message.answer("üö´ –ó–≤—ë–∑–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    balance = await refresh_balance(call.bot)
    await update_menu(bot=call.bot, chat_id=call.message.chat.id, user_id=call.from_user.id, message_id=call.message.message_id)


@wizard_router.callback_query(lambda c: c.data == "withdraw_all_cancel")
async def withdraw_all_cancel(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—Å–µ—Ö –∑–≤—ë–∑–¥.
    """
    await call.message.edit_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.answer()
    await update_menu(bot=call.bot, chat_id=call.message.chat.id, user_id=call.from_user.id, message_id=call.message.message_id)


async def try_cancel(message: Message, state: FSMContext) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–≤—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å /cancel, –∏ –æ—Ç–º–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –¥–∞.
    """
    if message.text and message.text.strip().lower() == "/cancel":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await update_menu(bot=message.bot, chat_id=message.chat.id, user_id=message.from_user.id, message_id=message.message_id)
        return True
    return False


def register_wizard_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è wizard_router –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ (Dispatcher).
    """
    dp.include_router(wizard_router)
