# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import asyncio
import json
import logging
import os
import sys
from datetime import datetime, timezone

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import aiofiles
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, BaseMiddleware
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError, TelegramNetworkError, TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
    Message,
    PreCheckoutQuery,
    TelegramObject,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
USER_ID = int(os.getenv("TELEGRAM_USER_ID"))

ALLOWED_USER_IDS = []
ALLOWED_USER_IDS.append(USER_ID)
CURRENCY = 'XTR'
VERSION = '1.0.1'

# --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
CONFIG_PATH = "config.json"
DEFAULT_CONFIG = {
    "MIN_PRICE": 5000,
    "MAX_PRICE": 10000,
    "MIN_SUPPLY": 1000,
    "MAX_SUPPLY": 10000,
    "COUNT": 5,
    "TARGET_USER_ID": USER_ID,
    "TARGET_CHAT_ID": None,
    "BALANCE": 0,
    "BOUGHT": 0,
    "ACTIVE": False,
    "DONE": False,
    "LAST_MENU_MESSAGE_ID": None
}
CONFIG_TYPES = {
    "MIN_PRICE": (int, False),
    "MAX_PRICE": (int, False),
    "MIN_SUPPLY": (int, False),
    "MAX_SUPPLY": (int, False),
    "COUNT": (int, False),
    "TARGET_USER_ID": (int, True),
    "TARGET_CHAT_ID": (str, True),
    "BALANCE": (int, False),
    "BOUGHT": (int, False),
    "ACTIVE": (bool, False),
    "DONE": (bool, False),
    "LAST_MENU_MESSAGE_ID": (int, True)
}

class AccessControlMiddleware(BaseMiddleware):
    def __init__(self, allowed_user_ids: list[int], bot: Bot):
        self.allowed_user_ids = allowed_user_ids
        self.bot = bot
        super().__init__()

    async def __call__(self, handler, event: TelegramObject, data: dict):
        user = data.get("event_from_user")
        if user and user.id not in self.allowed_user_ids:
            try:
                if isinstance(event, Message):
                    await event.answer("‚úÖ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –æ—Ç —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n<b>ü§ñ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: <a href=\"https://github.com/leozizu/TelegramGiftsBot\">GitHub</a></b>\n<b>üê∏ –ê–≤—Ç–æ—Ä: @leozizu</b>\n<b>üì¢ –ö–∞–Ω–∞–ª: @pepeksey</b>")
                elif isinstance(event, CallbackQuery):
                    await event.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            except Exception as e:
                print(f"{now_str()}: [WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
            return
        return await handler(event, data)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
dp.message.middleware(AccessControlMiddleware(ALLOWED_USER_IDS, bot))
dp.callback_query.middleware(AccessControlMiddleware(ALLOWED_USER_IDS, bot))

class ConfigWizard(StatesGroup):
    min_price = State()
    max_price = State()
    min_supply = State()
    max_supply = State()
    count = State()
    user_id = State()
    deposit_amount = State()
    refund_id = State()

def now_str() -> str:
    return datetime.now(timezone.utc).strftime("%d.%m.%Y %H:%M:%S")

def is_valid_type(value, expected_type, allow_none=False):
    if value is None:
        return allow_none
    return isinstance(value, expected_type)

async def ensure_config(path=CONFIG_PATH):
    if not os.path.exists(path):
        async with aiofiles.open(path, mode="w", encoding="utf-8") as f:
            await f.write(json.dumps(DEFAULT_CONFIG, indent=2))
        print(f"{now_str()}: [INFO] –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {path}")

async def load_config(path=CONFIG_PATH):
    async with aiofiles.open(path, mode="r", encoding="utf-8") as f:
        data = await f.read()
        return json.loads(data)

async def save_config(new_data: dict, path=CONFIG_PATH):
    try:
        current_data = {}
        if os.path.exists(path):
            async with aiofiles.open(path, mode="r", encoding="utf-8") as f:
                current_raw = await f.read()
                if current_raw.strip():
                    current_data = json.loads(current_raw)

        current_data.update(new_data)

        async with aiofiles.open(path, mode="w", encoding="utf-8") as f:
            await f.write(json.dumps(current_data, indent=2))

        print(f"{now_str()}: [INFO] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

    except Exception as e:
        print(f"{now_str()}: [ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å config: {e}")

async def validate_config(config: dict) -> dict:
    updated = False
    validated = {}

    for key, default_value in DEFAULT_CONFIG.items():
        expected_type, allow_none = CONFIG_TYPES.get(key, (type(default_value), False))
        if key not in config or not is_valid_type(config[key], expected_type, allow_none):
            print(f"{now_str()}: [WARN] –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ '{key}', –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_value}")
            validated[key] = default_value
            updated = True
        else:
            validated[key] = config[key]

    if updated:
        await save_config(validated)
        print(f"{now_str()}: [INFO] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º–∏ –ø–æ–ª—è–º–∏.")

    return validated

def config_action_keyboard(active: bool) -> InlineKeyboardMarkup:
    toggle_text = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if active else "üü¢ –í–∫–ª—é—á–∏—Ç—å"

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=toggle_text, callback_data="toggle_active"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_config")
        ],
        [
            InlineKeyboardButton(text="‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_bought"),
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")
        ],
        [
            InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit_menu"),
            InlineKeyboardButton(text="‚Ü©Ô∏è –í—ã–≤–µ—Å—Ç–∏", callback_data="refund_menu")
        ]
    ])

async def delete_menu(chat_id: int = USER_ID, current_message_id: int = None):
    last_menu_message_id = await get_last_menu_message_id()

    if last_menu_message_id and last_menu_message_id != current_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=last_menu_message_id)
        except TelegramBadRequest as e:
            error_text = str(e)
            if "message can't be deleted for everyone" in error_text:
                await bot.send_message(
                    chat_id,
                    "‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é —É—Å—Ç–∞—Ä–µ–ª–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ (–ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 48 —á–∞—Å–æ–≤). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.\n"
                )
            elif "message to delete not found" in error_text:
                pass
            else:
                raise

async def send_menu(chat_id: int = USER_ID, config: dict = None, text: str = None) -> int:
    sent = await bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=config_action_keyboard(config.get("ACTIVE"))
    )
    await update_last_menu_message_id(sent.message_id)
    return sent.message_id

async def update_last_menu_message_id(message_id: int):
    config = await load_config()
    config["LAST_MENU_MESSAGE_ID"] = message_id
    await save_config(config)

async def get_last_menu_message_id():
    config = await load_config()
    return config.get("LAST_MENU_MESSAGE_ID")

async def refresh_balance() -> int:
    balance = await get_stars_balance()
    config = await load_config()
    config["BALANCE"] = balance
    await save_config(config)
    return balance

async def change_balance(delta: int) -> int:
    config = await load_config()
    config["BALANCE"] = max(0, config.get("BALANCE", 0) + delta)
    await save_config(config)
    return config["BALANCE"]

@dp.callback_query(F.data == "show_help")
async def help_callback(call: CallbackQuery):
    raw_config = await load_config()
    config = await validate_config(raw_config)
    TARGET_USER_ID = config["TARGET_USER_ID"]
    TARGET_CHAT_ID = config["TARGET_CHAT_ID"]
    target_display = (
        f"{TARGET_CHAT_ID}"
        if TARGET_CHAT_ID
        else f"<code>{TARGET_USER_ID}</code> (–í—ã)" if str(TARGET_USER_ID) == str(USER_ID)
        else f"<code>{TARGET_USER_ID}</code>"
    )

    help_text = (
        f"<b>üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º (v{VERSION}):</b>\n\n"
        "<b>üü¢ –í–∫–ª—é—á–∏—Ç—å / üî¥ –í—ã–∫–ª—é—á–∏—Ç—å</b> ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫–∏.\n"
        "<b>‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</b> ‚Äî –ø–æ—à–∞–≥–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n"
        "<b>‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫</b> ‚Äî –æ–±–Ω—É–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤.\n"
        "<b>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å</b> ‚Äî –¥–µ–ø–æ–∑–∏—Ç –∑–≤—ë–∑–¥ –≤ –±–æ—Ç.\n"
        "<b>‚Ü©Ô∏è –í—ã–≤–µ—Å—Ç–∏</b> ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –∑–≤—ë–∑–¥ –ø–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n\n"
        "<b>üìå –ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>\n\n"
        "‚ùï –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞ ‚Äî –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–π—Ç–∏ –≤ —ç—Ç–æ—Ç –±–æ—Ç –∏ –Ω–∞–∂–∞—Ç—å <code>/start</code>.\n"
        "‚ùï –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —Å—Ç–∞—Ä—Ç—É—é—Ç ‚Äî –≤–∫–ª—é—á–∏—Ç–µ üü¢ –≤—Ä—É—á–Ω—É—é.\n"
        "‚ùóÔ∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞ <b>–∞–∫–∫–∞—É–Ω—Ç</b> ‚Äî –ø–∏—à–∏—Ç–µ <b>id</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç @userinfobot).\n"
        "‚ùóÔ∏è –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞ <b>–∫–∞–Ω–∞–ª</b> ‚Äî –ø–∏—à–∏—Ç–µ <b>username</b> –∫–∞–Ω–∞–ª–∞.\n"
        "‚ùì –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–≤—ë–∑–¥?  –ù–∞–∂–º–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º –∏ —Ç–∞–º –±—É–¥–µ—Ç ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n"
        f"‚úÖ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç? –ö—É–ø–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ üß∏ –∑–∞ ‚òÖ15, –ø–æ–ª—É—á–∞—Ç–µ–ª—å {target_display}.\n\n"
        "<b>üê∏ –ê–≤—Ç–æ—Ä: @leozizu</b>\n"
        "<b>üì¢ –ö–∞–Ω–∞–ª: @pepeksey</b>"
    )
    button = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–¢–µ—Å—Ç? –ö—É–ø–∏—Ç—å üß∏ –∑–∞ ‚òÖ15", callback_data="buy_bear")
        ]
    ])

    await call.answer()
    await call.message.answer(help_text, reply_markup=button)

@dp.callback_query(F.data == "buy_bear")
async def buy_bear(call: CallbackQuery):
    gift_id = '5170233102089322756'
    raw_config = await load_config()
    config = await validate_config(raw_config)
    TARGET_USER_ID = config["TARGET_USER_ID"]
    TARGET_CHAT_ID = config["TARGET_CHAT_ID"]
    target_display = (
        f"{TARGET_CHAT_ID}"
        if TARGET_CHAT_ID
        else f"<code>{TARGET_USER_ID}</code> (–í—ã)" if str(TARGET_USER_ID) == str(USER_ID)
        else f"<code>{TARGET_USER_ID}</code>"
    )

    success = await buy_gift(
        gift_id=gift_id,
        user_id=TARGET_USER_ID,
        chat_id=TARGET_CHAT_ID,
        gift_price=15,
        file_id=None
    )
    if not success:
        await call.answer()
        await call.message.answer("‚ö†Ô∏è –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ üß∏ –∑–∞ ‚òÖ15 –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.\nüí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.\n")
        return
    
    await call.answer()
    await call.message.answer(f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ üß∏ –∑–∞ ‚òÖ15 –∫—É–ø–ª–µ–Ω. –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {target_display}.")

@dp.callback_query(F.data == "reset_bought")
async def reset_bought_callback(call: CallbackQuery):
    config = await load_config()
    config["BOUGHT"] = 0
    config["DONE"] = False
    config["ACTIVE"] = False
    await save_config(config)

    info = format_config_summary(config)
    try:
        await call.message.edit_text(
            info,
            reply_markup=config_action_keyboard(config["ACTIVE"])
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

    await call.answer("–°—á—ë—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫ —Å–±—Ä–æ—à–µ–Ω.")

@dp.callback_query(F.data == "deposit_menu")
async def deposit_menu(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>5000</code>\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
    await state.set_state(ConfigWizard.deposit_amount)
    await call.answer()

@dp.message(ConfigWizard.deposit_amount)
async def deposit_amount_input(message: Message, state: FSMContext):
    if message.text.strip().lower() == "/cancel":
        await cancel_edit(message, state)
        return
    
    try:
        amount = int(message.text)
        if amount < 1 or amount > 10000:
            raise ValueError
        prices = [LabeledPrice(label=CURRENCY, amount=amount)]
        await message.answer_invoice(
            title="–ë–æ—Ç –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤",
            description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            prices=prices,
            provider_token="",
            payload="stars_deposit",
            currency=CURRENCY,
            start_parameter="deposit",
            reply_markup=payment_keyboard(amount=amount),
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000.")

@dp.callback_query(F.data == "refund_menu")
async def refund_menu(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
    await state.set_state(ConfigWizard.refund_id)
    await call.answer()

@dp.message(ConfigWizard.refund_id)
async def refund_input(message: Message, state: FSMContext):
    if message.text.strip().lower() == "/cancel":
        await cancel_edit(message, state)
        return
    
    txn_id = message.text.strip()
    try:
        await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=txn_id
        )
        await message.answer("‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        balance = await refresh_balance()
        raw_config = await load_config()
        config = await validate_config(raw_config)
        await delete_menu(current_message_id=message.message_id)
        await send_menu(config=config, text=format_config_summary(config))
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ:\n<code>{e}</code>")
    await state.clear()

@dp.message(Command("cancel"))
async def cancel_edit(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    raw_config = await load_config()
    config = await validate_config(raw_config)
    await delete_menu(current_message_id=message.message_id)
    await send_menu(config=config, text=format_config_summary(config))

@dp.message(CommandStart())
async def command_status_handler(message: Message):
    balance = await refresh_balance()
    config = await load_config()
    info = format_config_summary(config)

    await delete_menu(current_message_id=message.message_id)
    await send_menu(config=config, text=info)

@dp.callback_query(F.data == "toggle_active")
async def toggle_active_callback(call: CallbackQuery):
    config = await load_config()
    config["ACTIVE"] = not config.get("ACTIVE", False)
    await save_config(config)

    info = format_config_summary(config)
    await call.message.edit_text(
        info,
        reply_markup=config_action_keyboard(config["ACTIVE"])
    )
    await call.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")

@dp.callback_query(F.data == "edit_config")
async def edit_config_handler(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>5000</code>\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
    await state.set_state(ConfigWizard.min_price)
    await call.answer()

@dp.message(ConfigWizard.min_price)
async def step_min_price(message: Message, state: FSMContext):
    try:
        value = int(message.text)
        if value <= 0:
            raise ValueError
        await state.update_data(MIN_PRICE=value)
        await message.answer("üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>10000</code>\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
        await state.set_state(ConfigWizard.max_price)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.message(ConfigWizard.max_price)
async def step_max_price(message: Message, state: FSMContext):
    try:
        value = int(message.text)
        if value <= 0:
            raise ValueError

        data = await state.get_data()
        min_price = data.get("MIN_PRICE")
        if min_price and value < min_price:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π.")
            return

        await state.update_data(MAX_PRICE=value)
        await message.answer("üì¶ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∞–ø–ª–∞–π –ø–æ–¥–∞—Ä–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>1000</code>\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
        await state.set_state(ConfigWizard.min_supply)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.message(ConfigWizard.min_supply)
async def step_min_supply(message: Message, state: FSMContext):
    try:
        value = int(message.text)
        if value <= 0:
            raise ValueError
        await state.update_data(MIN_SUPPLY=value)
        await message.answer("üì¶ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–∞–ø–ª–∞–π –ø–æ–¥–∞—Ä–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>10000</code>\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
        await state.set_state(ConfigWizard.max_supply)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.message(ConfigWizard.max_supply)
async def step_max_supply(message: Message, state: FSMContext):
    try:
        value = int(message.text)
        if value <= 0:
            raise ValueError

        data = await state.get_data()
        min_supply = data.get("MIN_SUPPLY")
        if min_supply and value < min_supply:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–∞–ø–ª–∞–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        await state.update_data(MAX_SUPPLY=value)
        await message.answer("üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>5</code>\n\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å")
        await state.set_state(ConfigWizard.count)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.message(ConfigWizard.count)
async def step_count(message: Message, state: FSMContext):
    try:
        value = int(message.text)
        if value <= 0:
            raise ValueError
        await state.update_data(COUNT=value)
        await message.answer(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n\n"
            f"‚Ä¢ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä –≤–∞—à: <code>{USER_ID}</code>)\n"
            "‚Ä¢ –ò–ª–∏ <b>username –∫–∞–Ω–∞–ª–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>@channel</code>)\n\n"
            "‚ùóÔ∏è –£–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—É—Ç @userinfobot\n\n"
            "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å"
        )
        await state.set_state(ConfigWizard.user_id)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@dp.message(ConfigWizard.user_id)
async def step_user_id(message: Message, state: FSMContext):
    user_input = message.text.strip()

    if user_input.startswith("@"):
        target_chat = user_input
        target_user = None
    elif user_input.isdigit():
        target_chat = None
        target_user = int(user_input)
    else:
        await message.answer("‚ùå –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∞–∫–∫–∞—É–Ω—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞. –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–æ–ª—å –∫–∞–Ω–∞–ª, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ username –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(
        TARGET_USER_ID=target_user,
        TARGET_CHAT_ID=target_chat
    )

    data = await state.get_data()
    balance = await refresh_balance()
    config = await load_config()

    config.update({
        "MIN_PRICE": data["MIN_PRICE"],
        "MAX_PRICE": data["MAX_PRICE"],
        "MIN_SUPPLY": data["MIN_SUPPLY"],
        "MAX_SUPPLY": data["MAX_SUPPLY"],
        "COUNT": data["COUNT"],
        "TARGET_USER_ID": target_user,
        "TARGET_CHAT_ID": target_chat,
        "BALANCE": balance,
        "BOUGHT": 0,
        "ACTIVE": False,
        "DONE": False,
    })

    await save_config(config)
    await state.clear()
    await message.answer("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å üü¢ —Å—Ç–∞—Ç—É—Å!")

    await delete_menu(current_message_id=message.message_id)
    await send_menu(config=config, text=format_config_summary(config))

def format_config_summary(config: dict) -> str:
    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if config.get("ACTIVE") else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    target_chat_id = config.get("TARGET_CHAT_ID")
    target_user_id = config.get("TARGET_USER_ID")
    target_display = (
        f"{target_chat_id}"
        if target_chat_id
        else f"<code>{target_user_id}</code> (–í—ã)" if str(target_user_id) == str(USER_ID)
        else f"<code>{target_user_id}</code>"
    )
    balance = config["BALANCE"]

    return (
        f"üö¶ <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
        f"üí∞ <b>–¶–µ–Ω–∞</b>: {config.get('MIN_PRICE'):,} ‚Äì {config.get('MAX_PRICE'):,} ‚òÖ\n"
        f"üì¶ <b>–°–∞–ø–ª–∞–π</b>: {config.get('MIN_SUPPLY'):,} ‚Äì {config.get('MAX_SUPPLY'):,}\n"
        f"üéÅ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>: {config.get('BOUGHT'):,} / {config.get('COUNT'):,}\n"
        f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å</b>: {target_display}\n\n"
        f"üí∏ <b>–ë–∞–ª–∞–Ω—Å</b>: {balance:,} ‚òÖ\n"
    )

def payment_keyboard(amount):
    builder = InlineKeyboardBuilder()
    builder.button(text=f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å ‚òÖ{amount:,}", pay=True)
    return builder.as_markup()

@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@dp.message(F.successful_payment)
async def process_successful_payment(message: Message) -> None:
    await message.answer(
        f'‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω.',
        message_effect_id="5104841245755180586"
    )
    balance = await refresh_balance()
    raw_config = await load_config()
    config = await validate_config(raw_config)
    await delete_menu(current_message_id=message.message_id)
    await send_menu(config=config, text=format_config_summary(config))

async def buy_gift(gift_id, user_id, chat_id, gift_price, file_id, retries=3):
    balance = await refresh_balance()
    if balance < gift_price:
        print(f"{now_str()}: [WARN] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ {gift_id} (—Ç—Ä–µ–±—É–µ—Ç—Å—è: {gift_price}, –¥–æ—Å—Ç—É–ø–Ω–æ: {balance})")
        
        raw_config = await load_config()
        config = await validate_config(raw_config)
        config["ACTIVE"] = False
        await save_config(config)

        return False
    
    for attempt in range(1, retries + 1):
        try:
            if user_id is not None and chat_id is None:
                result = await bot.send_gift(gift_id=gift_id, user_id=user_id)
            elif user_id is None and chat_id is not None:
                result = await bot.send_gift(gift_id=gift_id, chat_id=chat_id)
            else:
                break

            if result:
                new_balance = await change_balance(int(-gift_price))
                print(f"{now_str()}: [INFO] ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ {gift_id} –∑–∞ {gift_price} –∑–≤—ë–∑–¥. –û—Å—Ç–∞—Ç–æ–∫: {new_balance}")
                return True
            
            print(f"{now_str()}: [WARN] –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}: –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ {gift_id}. –ü–æ–≤—Ç–æ—Ä...")

        except TelegramNetworkError as e:
            print(f"{now_str()}: [ERROR] –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}: –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {2**attempt} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(2**attempt)

        except TelegramAPIError as e:
            print(f"{now_str()}: [ERROR] –û—à–∏–±–∫–∞ Telegram API: {e}")
            break

    print(f"{now_str()}: ‚ùå [ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ {gift_id} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫.")
    return False

async def get_gifts():
    await ensure_config()
    balance = await refresh_balance()

    while True:
        try:
            raw_config = await load_config()
            config = await validate_config(raw_config)

            if not config["ACTIVE"]:
                await asyncio.sleep(1)
                continue

            MIN_PRICE = config["MIN_PRICE"]
            MAX_PRICE = config["MAX_PRICE"]
            MIN_SUPPLY = config["MIN_SUPPLY"]
            MAX_SUPPLY = config["MAX_SUPPLY"]
            COUNT = config["COUNT"]
            TARGET_USER_ID = config["TARGET_USER_ID"]
            TARGET_CHAT_ID = config["TARGET_CHAT_ID"]

            get_market_gifts = await bot.get_available_gifts()
            gifts = get_market_gifts.gifts
            
            filtered_gifts = [
                gift for gift in gifts
                    if MIN_PRICE <= gift.star_count <= MAX_PRICE and
                    MIN_SUPPLY <= (gift.total_count or 0) <= MAX_SUPPLY
            ]
            filtered_gifts.sort(key=lambda g: g.star_count, reverse=True)

            purchases = []

            for gift in filtered_gifts:
                gift_id = gift.id
                gift_price = gift.star_count
                gift_total_count = gift.total_count or 0
                sticker_file_id = gift.sticker.file_id

                if config["DONE"] == False and config["ACTIVE"] == True:
                    print(f"{now_str()}: [MATCH] {gift_id} - {gift_price} stars - supply: {gift_total_count}")

                while config["BOUGHT"] < COUNT:
                    success = await buy_gift(
                        gift_id=gift_id,
                        user_id=TARGET_USER_ID,
                        chat_id=TARGET_CHAT_ID,
                        gift_price=gift_price,
                        file_id=sticker_file_id
                    )

                    if not success:
                        break

                    config["BOUGHT"] += 1
                    purchases.append({"id": gift_id, "price": gift_price})
                    await save_config(config)
                    await asyncio.sleep(0.1)

                if config["BOUGHT"] >= COUNT and not config["DONE"]:
                    config["ACTIVE"] = False
                    config["DONE"] = True
                    await save_config(config)

                    target_display = (
                        f"{TARGET_CHAT_ID}" if TARGET_CHAT_ID else str(TARGET_USER_ID)
                    )

                    summary_lines = ["‚úÖ –í—Å–µ –ø–æ–¥–∞—Ä–∫–∏ –∫—É–ø–ª–µ–Ω—ã!\n"]
                    total_spent = 0
                    gift_summary = {}

                    for p in purchases:
                        key = p["id"]
                        if key not in gift_summary:
                            gift_summary[key] = {"price": p["price"], "count": 0}
                        gift_summary[key]["count"] += 1
                        total_spent += p["price"]

                    for gid, data in gift_summary.items():
                        summary_lines.append(
                            f"üì¶ <b>ID:</b> {gid} | üí∞ {data['price']:,} ‚òÖ √ó {data['count']}"
                        )

                    summary_lines.append(f"\nüí∏ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {total_spent:,} ‚òÖ")
                    summary_lines.append(f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {target_display}")
                    summary = "\n".join(summary_lines)

                    message = await bot.send_message(chat_id=USER_ID, text=summary)

                    balance = await refresh_balance()

                    await delete_menu(current_message_id=message.message_id)
                    await send_menu(config=config, text=format_config_summary(config))
                    break

            if len(filtered_gifts) > 0 and 0 <= config["BOUGHT"] < COUNT and not config["DONE"]:
                config["ACTIVE"] = False
                config["DONE"] = False
                await save_config(config)

                target_display = (
                    f"{TARGET_CHAT_ID}" if TARGET_CHAT_ID else str(TARGET_USER_ID)
                )

                summary_lines = ["‚ö†Ô∏è –ü–æ–∫—É–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\nüí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.\n"]
                total_spent = 0
                gift_summary = {}

                for p in purchases:
                    key = p["id"]
                    if key not in gift_summary:
                        gift_summary[key] = {"price": p["price"], "count": 0}
                    gift_summary[key]["count"] += 1
                    total_spent += p["price"]

                for gid, data in gift_summary.items():
                    summary_lines.append(
                        f"üì¶ <b>ID:</b> {gid} | üí∞ {data['price']:,} ‚òÖ √ó {data['count']}"
                    )

                if len(gift_summary.items()) > 0: summary_lines.append("\n")

                summary_lines.append(f"üí∏ <b>–ò—Ç–æ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {total_spent:,} ‚òÖ")
                summary_lines.append(f"üéÅ <b>–ö—É–ø–ª–µ–Ω–æ:</b> {config['BOUGHT']} –∏–∑ {COUNT}")
                summary_lines.append(f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {target_display}")

                summary = "\n".join(summary_lines)

                message = await bot.send_message(chat_id=USER_ID, text=summary)

                balance = await refresh_balance()
                await delete_menu(current_message_id=message.message_id)
                await send_menu(config=config, text=format_config_summary(config))

        except Exception as e:
            print(f"{now_str()}: [ERROR] –û—à–∏–±–∫–∞ –≤ get_gifts: {e}")

        await asyncio.sleep(0.1)

async def get_stars_balance():
    offset = 0
    limit = 100
    balance = 0
    total_transactions = 0

    while True:
        get_transactions = await bot.get_star_transactions(offset=offset, limit=limit)
        transactions = get_transactions.transactions

        if not transactions:
            break

        for transaction in transactions:
            source = transaction.source
            amount = transaction.amount
            if source is not None:
                balance += amount
            else:
                balance -= amount

        total_transactions += len(transactions)
        offset += limit

    return balance

async def main() -> None:
    asyncio.create_task(get_gifts())
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
